buildscript {
    ext.kotlin_version = '1.3.50'
    ext.ktor_version = '1.2.4'
    ext.logback_version = '1.2.3'
    ext.slf4j_version = '1.7.25'
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.3"
    }
}

apply plugin: 'kotlin'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'application'
//apply from: "$rootDir/gradle/docker_helper.gradle"

mainClassName = "io.ktor.server.netty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = [ 'src' ]
    main.resources.srcDirs = [ 'resources' ]
}

repositories {
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"
    compile "io.ktor:ktor-html-builder:$ktor_version"
    compile "ch.qos.logback:logback-classic:$logback_version"
}

kotlin.experimental.coroutines = 'enable'
def archivesBaseName = 'ktor_basic_app'
shadowJar {
    archivesBaseName = archivesBaseName
}
task dockerBuild(type: Exec) {
    description "dockerBuild"
    commandLine "docker build -t $archivesBaseName .".split("\\s+")
}

task dockerDeploy(type: Exec) {
    description "dockerDeploy"
    try {
        commandLine "docker rmi -f $archivesBaseName".split("\\s+")
        commandLine "docker run -d -m512M --cpus 2 -it -p 8080:8080 $archivesBaseName".split("\\s+")
    }
    catch (Exception e) {
        print(e)
    }
//    commandLine "docker rmi -d $archivesBaseName -f".split("\\s+")
}
